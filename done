Afficher un prompt en l’attente d’une nouvelle commande. : OK

Posséder un historique fonctionnel : OK

Chercher et lancer le bon exécutable (en se basant sur la variable d’environnement
PATH, ou sur un chemin relatif ou absolu). : KO

Ne pas utiliser plus d’une variable globale. Réfléchissez-y car vous devrez jus-
tifier son utilisation. : OK

Ne pas interpréter de quotes (guillemets) non fermés ou de caractères spéciaux non
demandés dans le sujet, tels que \ (le backslash) ou ; (le point-virgule). : OK ?

Gérer ’ (single quote) qui doit empêcher le shell d’interpréter les méta-caractères
présents dans la séquence entre guillemets. : OK ?

Gérer " (double quote) qui doit empêcher le shell d’interpréter les méta-caractères
présents dans la séquence entre guillemets sauf le $ (signe dollar). : KO

Implémenter les redirections :
< doit rediriger l’entrée.
> doit rediriger la sortie.
<< doit recevoir un délimiteur et lire l’input donné jusqu’à rencontrer une ligne
contenant le délimiteur. Cependant, l’historique n’a pas à être mis à jour !
>> doit rediriger la sortie en mode append. : KO

Implémenter les pipes (caractère |). La sortie de chaque commande de la pipeline
est connectée à l’entrée de la commande suivante grâce à un pipe. : KO

Gérer les variables d’environnement (un $ suivi d’une séquence de caractères)
qui doivent être substituées par leur contenu. : KO

Gérer $? qui doit être substitué par le statut de sortie de la dernière pipeline
exécutée au premier plan. : KO

Gérer ctrl-C, ctrl-D et ctrl-\ qui doivent fonctionner comme dans bash.
En mode interactif :
ctrl-C affiche un nouveau prompt sur une nouvelle ligne. : OK
ctrl-D quitte le shell. : OK
ctrl-\ ne fait rien. : OK

Votre shell doit implémenter les builtins suivantes :
echo et l’option -n : KO

cd uniquement avec un chemin relatif ou absolu : OK
pwd sans aucune option : OK
export sans aucune option : OK
unset sans aucune option : OK
env sans aucune option ni argument : OK
exit sans aucune option : OK

La fonction readline() peut causer des fuites de mémoire. Vous n’avez pas à les
gérer. Attention, cela ne veut pas pour autant dire que votre code, oui celui que
vous avez écrit, peut avoir des fuites de mémoire. : KO